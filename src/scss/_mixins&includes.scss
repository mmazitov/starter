// BASE MIXIN
@mixin base {
  overflow: hidden;
  position: relative;
}

// CLEARFIX MIXIN
@mixin clearfix {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// BOXSIZING MIXIN
@mixin boxsizing {
  -webkit-box-sizing: border-box;
   -moz-box-sizing: border-box;
        box-sizing: border-box;
}

// INPUT STYLE MIXIN
@mixin inputStyle ($coordinates: 0 0 0 0){
  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);
  padding: $top $right $bottom $left;
  border-left: none;
  outline-style: none;
  -webkit-appearance:none;
}

// PLACEHOLDER MIXIN
@mixin inputPlaceholder($input-text-color) {
  &::-webkit-input-placeholder {color: $input-text-color; opacity: 1;}
  &:-moz-placeholder {color: $input-text-color; opacity: 1;}
  &::-moz-placeholder {color: $input-text-color; opacity: 1;}
  &:-ms-input-placeholder {color: $input-text-color;}
  &:focus:-moz-placeholder {color:transparent; opacity: 1;}
  &:focus::-moz-placeholder {color:transparent; opacity: 1;}
  &:focus::-webkit-input-placeholder {color:transparent;}
  &:focus:-ms-input-placeholder {color:transparent;}
  &:focus::placeholder {color:transparent;}
}

//CUSTOM BORDER STYLE MIXIN
@mixin borderStyle ( $coordinates: 0 0 0 0, $color: #000000, $style: solid ) {
  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);
  @if not(unitless($top)) {
    border-top: $top $style $color;
  }
  @if not(unitless($right)) {
    border-right: $right $style $color;
  }
  @if not(unitless($bottom)) {
    border-bottom: $bottom $style $color;
  }
  @if not(unitless($left)) {
    border-left: $left $style $color;
  }
}

// BORDER STYLE MIXIN
@mixin allBorder($width, $style, $color) {
  border: $width $style $color;
}

//MYLTIPLE STYLE BORDER MIXIN
// @include border(10px solid green, 10px solid red);
@mixin border($border: false, $border_horizontal: false, $border_bottom: false, $border_left: false) {
  $args: length($border);
  // Reset Variables Based on Argument Count
  @if $args > 1 and length(nth($border, 1)) > 1 or nth($border, 1) == none {
    @if $args == 4 {
      $border_left: nth($border, 4);
      $border_bottom: nth($border, 3);
      $border_horizontal: nth($border, 2);
      $border: nth($border, 1);
    }
    @else if $args == 3 {
      $border_bottom: nth($border, 3);
      $border_horizontal: nth($border, 2);
      $border: nth($border, 1);
    }
    @else if $args == 2 {
      $border_horizontal: nth($border, 2);
      $border: nth($border, 1);
    }
  }
  // Assign Attributes from Variables
  @if $border and $border_horizontal and $border_bottom and $border_left {
    border-top: $border;
    border-right: $border_horizontal;
    border-bottom: $border_bottom;
    border-left: $border_left;
  }
  @else if $border and $border_horizontal and $border_bottom {
    border: $border_horizontal;
    border-top: $border;
    border-bottom: $border_bottom;
  }
  @else if $border and $border_horizontal {
    border: $border;
    border-right: $border_horizontal;
    border-left: $border_horizontal;
  }
  @else {
    border: $border;
  }
}

//BOX SHADOW MIXIN
// @include box-shadow1(5px 10px 50px rgba(255, 10, 5, .05), 5px 1px 1px black inset);
@mixin box-shadow1($shadow1, $shadow2:false, $shadow3:false, $shadow4:false, $shadow5:false) {
 $params: $shadow1;
  @if $shadow2 
    { $params: $shadow1, $shadow2; }
    @if $shadow3 != false
      { $params: $shadow1, $shadow2, $shadow3; }
      @if $shadow4 != false
        { $params: $shadow1, $shadow2, $shadow3, $shadow4; }
        @if $shadow5 != false
          { $params: $shadow1, $shadow2, $shadow3, $shadow4, $shadow5; }
  box-shadow: $params;
}
//TEXT SHADOW MIXIN
@mixin text-shadow($x, $y, $radius, $color){
  text-shadow: $x $y $radius $color;
}

// DISPLAY INLINE-BLOCK IE MIXIN
@mixin ie {
  zoom: 1;
  *display: inline;
}

//INLINE BLOCK MIXIN
@mixin inline {
  display: inline-block;
  vertical-align: top;
}

// TEXT-OVERFLOW MIXIN
@mixin textOverflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// SIZE MIXIN
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// LINK MIXIN
// @include linx(white, blue, green, red);
@mixin links ($link, $visit, $hover, $active) {
  color: $link;
  &:hover {
    color: $visit;
  }
  &:active {
    color: $hover;
  }
  &:visited {
    color: $active;
  }
}

// ANIMATED BORDER HOVER MIXIN
// @include animated-border;
@mixin animated-border {
  &:after {
    position: absolute;
    content:'';
    height: 1px;
    left: 0;
    right: 0;
    bottom: -5px;
  }
  &:hover {
    opacity: 1;
  }
  &:before {
    position: absolute;
    content:'';
    height: 1px;
    background: #fe4852;
    left: 0;
    width: 0%;
    bottom: -4px;
    transition: width .3s ease-in-out;
  }
  &:hover {
    &:before {
      width: 100%;
    }
  }
}

// // TRANSITION MIXIN
// // @include transition (color .3s ease);
// @mixin transition($args...) {
//   -webkit-transition: $args;
//   -moz-transition: $args;
//   -ms-transition: $args;
//   -o-transition: $args;
//   transition: $args;
// }

// ANIMATE MIXIN
// @include keyframes(slide-down) {
//   0% { opacity: 1; }
//   90% { opacity: 0; }
// }
@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }  
  @-ms-keyframes $animation-name {
    @content;
  }
  @-o-keyframes $animation-name {
    @content;
  }  
  @keyframes $animation-name {
    @content;
  }
}
// @include animation('slide-down 5s 3');
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

// ABSOLUTE POSITION MIXIN
@mixin absolutePosition($width, $height) {
  height: $height;
  width: $width;
  position: absolute;
  top: 50%;
  left: 50%;
  $margin_left: -($width / 2);
  $margin_top: -($height / 2);
  margin: $margin_top 0 0 $margin_left;
}

// ABSOLUTE ADAPTIVE POSITION MIXIN
@mixin adaptiveAbsolutePosition($width, $height, $minWidth, $maxWidth, $minHeight, $maxHeight) {
  height: $height;
  width: $width;
  min-width: $minWidth;
  max-width: $maxWidth;
  min-height: $minHeight;
  max-height: $maxHeight;
  overflow: auto;
  margin: auto;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}


// ALL BORDER RADIUS
@mixin borderRadius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;
}

// ITEM BEFORE
@mixin itemBefore ($width, $height, $bg) {
 &:before {
    position: absolute;
    content:'';
    height: $height;
    background: $bg;
    width: $width;
  }
}

//ITEM BEFORE POSITION
@mixin beforePosition ($position: 0 0 0 0) {
  &:before {
    $top: nth($position, 1);
    $right: nth($position, 2);
    $bottom: nth($position, 3);
    $left: nth($position, 4);
    @if not(unitless($top)) {
      top: $top;
    }
    @if not(unitless($right)) {
      right: $right;
    }
    @if not(unitless($bottom)) {
      bottom: $bottom;
    }
    @if not(unitless($left)) {
      left: $left;
    }
  }
}

// ITEM AFTER
@mixin itemAfter ($width, $height, $bg) {
 &:after {
    position: absolute;
    content:'';
    height: $height;
    background: $bg;
    width: $width;
  }
}

//ITEM BEFORE POSITION
@mixin afterPosition ($position: 0 0 0 0) {
  &:after {
    $top: nth($position, 1);
    $right: nth($position, 2);
    $bottom: nth($position, 3);
    $left: nth($position, 4);
    @if not(unitless($top)) {
      top: $top;
    }
    @if not(unitless($right)) {
      right: $right;
    }
    @if not(unitless($bottom)) {
      bottom: $bottom;
    }
    @if not(unitless($left)) {
      left: $left;
    }
  }
}

// OPACITY MIXIN
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie);
}

@mixin animation ($name, $duration, $delay, $ease) {
  animation: $name $duration $delay $ease;
}
//TRANSITION MIXIN
// @include transition (all 5s ease-out);
@mixin transition ($transition) {
  transition: $transition;
}
//SCALE MIXIN
// @include scale(2, 2);
@mixin scale ($scale, $scale2) {
  transform: scale($scale, $scale);
}
//RATATE MIXIN
//@include rotate(-90deg)
@mixin rotate ($deg) {
  transform: rotate($deg);
}
//SKEW MIXIN
//@include mixin(15deg, 20deg)
@mixin skew ($deg, $deg2) {
  transform: skew($deg, $deg2);
}
//TRANSLATE MIXIN
// @include mixin(250px, 0)
@mixin translate ($x, $y) {
  transform: translate($x, $y);
}

//PIXEL PERFECT MIXIN
// $layout-url — адрес картинки макета (джипег или пнг)
// $layout-width — Ширина макета, 100% по умолчанию
// $layout-opacity — Непрозрачность макета, 50% по дефолту
// $grid-opacity — Непрозрачность "миллиметровки", по дефолту 0
// $cell-width — Ширина клеточки сетки "миллиметровки"
// $cell-height — Высота клеточки сетки "миллиметровки"
// $line-color — Цвет линий "миллиметровки"
@mixin layout($layout-url: "../images/about.jpg", $layout-width:100%, $layout-opacity: .5, $grid-opacity:.5, $cell-width:10px, $cell-height:10px, $line-color: green){
  max-width: $layout-width;
  margin: 0 auto;
  &:before{
    content: url($layout-url);
    display: inline-block;
    position: absolute;
    width: 100%;
    top: 0;
    left: 0;
    z-index: 100;
    text-align: center;
    -webkit-opacity: $layout-opacity;
    -khtml-opacity:  $layout-opacity;
    -moz-opacity:    $layout-opacity;
    opacity:         $layout-opacity; 
  }
  @include regular-graph-paper( $grid-opacity, $cell-width, $cell-height, $line-color);
}
@mixin regular-graph-paper( $grid-opacity:1, $cell-width: 10px, $cell-height: 10px, $line-color: #fff){
  &:after{
    content: "";
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 999;
    background: -webkit-linear-gradient(left, darken($line-color, 25%) 1px, transparent 2px),
                -webkit-linear-gradient(top, darken($line-color, 25%) 1px, transparent 2px),
                -webkit-linear-gradient(left, $line-color 0px, transparent 1px),
                -webkit-linear-gradient(top, $line-color 0px, transparent 1px);
    background: -moz-linear-gradient(left, darken($line-color, 25%) 1px, transparent 0px),
                -moz-linear-gradient(top, darken($line-color, 25%) 1px, transparent 0px),
                -moz-linear-gradient(left, $line-color 0px, transparent 1px),
                -moz-linear-gradient(top, $line-color 0px, transparent 1px);
    background: -ms-linear-gradient(left, darken($line-color, 25%) 1px, transparent 1px),
                -ms-linear-gradient(top, darken($line-color, 25%) 1px, transparent 1px),
                -ms-linear-gradient(left, $line-color 0px, transparent 1px),
                -ms-linear-gradient(top, $line-color 0px, transparent 1px);
    background: -o-linear-gradient(left, darken($line-color, 25%) 1px, transparent 1px),
                -o-linear-gradient(top, darken($line-color, 25%) 1px, transparent 1px),
                -o-linear-gradient(left, $line-color 0px, transparent 1px),
                -o-linear-gradient(top, $line-color 0px, transparent 1px);
    background: linear-gradient(left, darken($line-color, 25%) 1px, transparent 1px),
                linear-gradient(top, darken($line-color, 25%) 1px, transparent 1px),
                linear-gradient(left, $line-color 0px, transparent 1px),
                linear-gradient(top, $line-color 0px, transparent 1px);
    -webkit-background-size: $cell-width $cell-height,
                 $cell-width $cell-height,
                 $cell-width*5 $cell-height*5,
                 $cell-width*5 $cell-height*5;
    background-size:         $cell-width*5 $cell-height*5,
                 $cell-width*5 $cell-height*5,
                 $cell-width $cell-height,
                 $cell-width $cell-height;
    background-position: 1px 1px, 1px 1px;
    -webkit-opacity: $grid-opacity;
    -khtml-opacity:  $grid-opacity;
    -moz-opacity:    $grid-opacity;
    opacity:         $grid-opacity;
  }
}


//BURGER MIXIN
// .burger-icon {
//   @include burger(25px, 3px, 5px, #444);
// }

// .menu-button.is-active .burger-icon {
//   @include burger-to-cross;
// }
// Vendor prefixes
$sass-burger-add-vendor-prefixes: true !default;
// Burger
@mixin burger($width: 30px, $height: 5px, $gutter: 3px, $color: #000, $border-radius: 0, $transition-duration: .3s) {
    $burger-height: $height !global;
    $burger-gutter: $gutter !global;

    position: relative;
    margin-top: $height + $gutter;
    margin-bottom: $height + $gutter;

    @if $sass-burger-add-vendor-prefixes {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
    }
    user-select: none;

    &, &:before, &:after {
        display: block;
        width: $width;
        height: $height;
        background-color: $color;
        @if $border-radius != 0 {
            border-radius: $border-radius;
        }

        @if $sass-burger-add-vendor-prefixes {
            -webkit-transition-property: background-color, -webkit-transform;
            -moz-transition-property: background-color, -moz-transform;
            -o-transition-property: background-color, -o-transform;
        }
        transition-property: background-color, transform;

        @if $sass-burger-add-vendor-prefixes {
            -webkit-transition-duration: $transition-duration;
            -moz-transition-duration: $transition-duration;
            -o-transition-duration: $transition-duration;
        }
        transition-duration: $transition-duration;
    }

    &:before, &:after {
        position: absolute;
        content: "";
    }

    &:before {
        top: -($height + $gutter);
    }

    &:after {
        top: $height + $gutter;
    }
}
// Select parts of the burger
@mixin burger-parts {
    &, &:before, &:after {
        @content;
    }
}
@mixin burger-top {
    &:before {
        @content;
    }
}
@mixin burger-middle {
    & {
        @content;
    }
}
@mixin burger-bottom {
    &:after {
        @content;
    }
}
// Burger animations
@mixin burger-to-cross {
    & {
        background-color: transparent;
    }
    &:before {
        @if $sass-burger-add-vendor-prefixes {
            -webkit-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -moz-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -ms-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -o-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
        }
        transform: translateY($burger-gutter + $burger-height) rotate(45deg);
    }
    &:after {
        @if $sass-burger-add-vendor-prefixes {
            -webkit-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -moz-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -ms-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -o-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
        }
        transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
    }
}